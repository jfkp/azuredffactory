{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nom de fabrique de donn√©es",
			"defaultValue": "jfkappfactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/datacopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copydata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "logdatacsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet1datasinklogdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/jfk_copy_using_sql_salesfact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_e0i",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "dbo.FactSales"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT dt.[ProductID],dt.[SalesOrderID],dt.[OrderQty],dt.[UnitPrice],hd.[OrderDate],hd.[CustomerID],hd.[TaxAmt]\r\n  FROM [SalesLT].[SalesOrderDetail] dt\r\n  LEFT JOIN [SalesLT].[SalesOrderHeader] hd\r\n  ON dt.[SalesOrderID]=hd.[SalesOrderID]",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert"
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16",
											"physicalType": "smallint"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									},
									{
										"source": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "OrderDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										},
										"sink": {
											"name": "TaxAmt",
											"type": "Decimal",
											"physicalType": "money",
											"scale": 4,
											"precision": 19
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_e0i",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_e0i",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-28T19:16:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimCustomersCsvMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText3",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DimCustomersCsvMetadata",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('DimCustomersCsvMetadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyDimCustomer",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"writeBehavior": "Insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DimCustomerCSVCopy",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().Name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DimCustomerPoolDb",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filebynary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "app_vm_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "access.log"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/01labdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesOrderDetailtable",
								"type": "DatasetReference"
							},
							"name": "jfkSalesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "SalesOrderHeadertable",
								"type": "DatasetReference"
							},
							"name": "SalesOrderHeaderstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "factsalestable",
								"type": "DatasetReference"
							},
							"name": "FactSalesStream"
						}
					],
					"transformations": [
						{
							"name": "SalesOrderDetailjoinSalesOrderHeader"
						},
						{
							"name": "selectcolumnstream"
						},
						{
							"name": "TotalAmountStream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> jfkSalesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SalesOrderHeaderstream",
						"jfkSalesOrderDetail, SalesOrderHeaderstream join(jfkSalesOrderDetail@SalesOrderID == SalesOrderHeaderstream@SalesOrderID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SalesOrderDetailjoinSalesOrderHeader",
						"SalesOrderDetailjoinSalesOrderHeader select(mapColumn(",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          SalesOrderID = SalesOrderHeaderstream@SalesOrderID,",
						"          OrderDate,",
						"          CustomerID,",
						"          TaxAmt",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumnstream",
						"selectcolumnstream derive(TotalAmount = multiply(OrderQty,UnitPrice)) ~> TotalAmountStream",
						"TotalAmountStream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductID as integer,",
						"          SalesOrderID as integer,",
						"          CustomerID as integer,",
						"          OrderQty as integer,",
						"          UnitPrice as decimal(19,4),",
						"          OrderDate as timestamp,",
						"          TaxAmt as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          SalesOrderID,",
						"          CustomerID,",
						"          OrderQty,",
						"          UnitPrice,",
						"          OrderDate,",
						"          TaxAmt,",
						"          TotalAmount",
						"     )) ~> FactSalesStream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFCustomerJsonArray')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerJson",
								"type": "DatasetReference"
							},
							"name": "CustomerjsonArraysource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomerJsonTable",
								"type": "DatasetReference"
							},
							"name": "Customerpooldb"
						}
					],
					"transformations": [
						{
							"name": "flattenjsoncourses"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customerid as integer,",
						"          customername as string,",
						"          registered as boolean,",
						"          courses as string[],",
						"          details as (mobile as string, city as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> CustomerjsonArraysource",
						"CustomerjsonArraysource foldDown(unroll(courses, courses),",
						"     mapColumn(",
						"          courses,",
						"          customerid,",
						"          customername,",
						"          registered,",
						"          mobile = details.mobile,",
						"          city = details.city",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenjsoncourses",
						"flattenjsoncourses sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          Registered as boolean,",
						"          Courses as string,",
						"          Mobile as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID = customerid,",
						"          CustomerName = customername,",
						"          Registered = registered,",
						"          Courses = courses,",
						"          Mobile = mobile,",
						"          City = city",
						"     )) ~> Customerpooldb"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFJSONLOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "logdata_Parquet1",
								"type": "DatasetReference"
							},
							"name": "logparquetfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "jsonrlogdata",
								"type": "DatasetReference"
							},
							"name": "Converttojson"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logparquetfile",
						"logparquetfile sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Converttojson"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DtFlowDimcustomer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomerTableStream",
								"type": "DatasetReference"
							},
							"name": "CustomerStream"
						},
						{
							"dataset": {
								"referenceName": "ProductStreamTable",
								"type": "DatasetReference"
							},
							"name": "ProductStream"
						},
						{
							"dataset": {
								"referenceName": "ProductModelTable",
								"type": "DatasetReference"
							},
							"name": "ProductModel"
						},
						{
							"dataset": {
								"referenceName": "ProductCategoryTable",
								"type": "DatasetReference"
							},
							"name": "ProductCategoryStream"
						},
						{
							"dataset": {
								"referenceName": "CustomeTableDim",
								"type": "DatasetReference"
							},
							"name": "GETMAXCUSTOMERSKVALUE"
						},
						{
							"dataset": {
								"referenceName": "DimProductTale",
								"type": "DatasetReference"
							},
							"name": "DimProdLatest"
						},
						{
							"dataset": {
								"referenceName": "CustomeTableDim",
								"type": "DatasetReference"
							},
							"name": "DoesCustomerExist"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CustomeTableDim",
								"type": "DatasetReference"
							},
							"name": "CustomerTable"
						},
						{
							"dataset": {
								"referenceName": "DimProductTale",
								"type": "DatasetReference"
							},
							"name": "DimProductTable"
						},
						{
							"name": "CustomerSKMAX"
						}
					],
					"transformations": [
						{
							"name": "ProductJoinProductModel"
						},
						{
							"name": "ProductCategoryJoin"
						},
						{
							"name": "selectcolumdimprod"
						},
						{
							"name": "ProductSK"
						},
						{
							"name": "selectcolumsCustomer"
						},
						{
							"name": "CustomerSK"
						},
						{
							"name": "DoesProductexists1"
						},
						{
							"name": "DoesCustomerExists"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerStream",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductStream",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductModel",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductCategoryStream",
						"source(output(",
						"          CustomerSK as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAX([CustomerSK]) as CustomerSK FROM [dbo].[DimCustomer]',",
						"     format: 'query',",
						"     staged: true) ~> GETMAXCUSTOMERSKVALUE",
						"source(output(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DimProdLatest",
						"source(output(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> DoesCustomerExist",
						"DoesProductexists1, ProductModel join(ProductStream@ProductModelID == ProductModel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoinProductModel",
						"ProductJoinProductModel, ProductCategoryStream join(ProductStream@ProductCategoryID == ProductCategoryStream@ProductCategoryID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductCategoryJoin",
						"ProductCategoryJoin select(mapColumn(",
						"          ProductID,",
						"          ProductName = ProductStream@Name,",
						"          ProductCategoryID = ProductStream@ProductCategoryID,",
						"          ProductModelID = ProductStream@ProductModelID,",
						"          ProductModelName = ProductModel@Name,",
						"          ProductCategoryName = ProductCategoryStream@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumdimprod",
						"selectcolumdimprod keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> ProductSK",
						"DoesCustomerExists select(mapColumn(",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumsCustomer",
						"selectcolumsCustomer keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> CustomerSK",
						"ProductStream, DimProdLatest exists(ProductStream@ProductID == DimProdLatest@ProductID,",
						"     negate:true,",
						"     broadcast: 'auto')~> DoesProductexists1",
						"CustomerStream, DoesCustomerExist exists(CustomerStream@CustomerID == DoesCustomerExist@CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> DoesCustomerExists",
						"CustomerSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string,",
						"          SalesPerson as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerSK,",
						"          CustomerID,",
						"          CompanyName,",
						"          SalesPerson",
						"     )) ~> CustomerTable",
						"ProductSK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductModelID as integer,",
						"          ProductcategoryID as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductSK,",
						"          ProductID,",
						"          ProductModelID,",
						"          ProductcategoryID = ProductCategoryID,",
						"          ProductName,",
						"          ProductModelName,",
						"          ProductCategoryName",
						"     )) ~> DimProductTable",
						"GETMAXCUSTOMERSKVALUE sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          CustomerSK",
						"     )) ~> CustomerSKMAX"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_logdatainfo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "logdata_Parquet1",
								"type": "DatasetReference"
							},
							"name": "logdataparquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Jsonlogdata",
								"type": "DatasetReference"
							},
							"name": "logdataparquetnotnull"
						}
					],
					"transformations": [
						{
							"name": "filterNULLVALUE"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataparquet",
						"logdataparquet filter(!(isNull({Resourcegroup}))) ~> filterNULLVALUE",
						"filterNULLVALUE sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['log.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> logdataparquetnotnull"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_ngnix')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Accesslogngnix",
								"type": "DatasetReference"
							},
							"name": "ngnixlogfromdsstream"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ServerLogsTable",
								"type": "DatasetReference"
							},
							"name": "ServerLogsStream"
						}
					],
					"transformations": [
						{
							"name": "selectcolumnngnix"
						},
						{
							"name": "derivedColumn1localtime"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {127.0.0.1} as string,",
						"          {-1} as string,",
						"          {-2} as string,",
						"          {[01/Apr/2024:09:37:43} as string,",
						"          {+0000]} as string,",
						"          {GET / HTTP/1.1} as string,",
						"          {200} as string,",
						"          {615} as string,",
						"          {-8} as string,",
						"          {Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ngnixlogfromdsstream",
						"ngnixlogfromdsstream select(mapColumn(",
						"          Remote_addr = {127.0.0.1},",
						"          Time_local = {[01/Apr/2024:09:37:43},",
						"          Request = {GET / HTTP/1.1},",
						"          Status = {200},",
						"          Bytes = {615}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumnngnix",
						"selectcolumnngnix derive(Time_local = substring(Time_local,2,length(Time_local) -1)) ~> derivedColumn1localtime",
						"derivedColumn1localtime sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Remote_addr as string,",
						"          Time_local as string,",
						"          Request as string,",
						"          Status as integer,",
						"          Bytes as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Remote_addr,",
						"          Time_local,",
						"          Request,",
						"          Status,",
						"          Bytes",
						"     )) ~> ServerLogsStream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSplitlogdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "logdata_Parquet1",
								"type": "DatasetReference"
							},
							"name": "logdataparquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pool_log_parquet",
								"type": "DatasetReference"
							},
							"name": "datalog"
						}
					],
					"transformations": [
						{
							"name": "split1ResourceGroup"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> logdataparquet",
						"logdataparquet split({Resourcegroup}=='app-grp',",
						"     disjoint: false) ~> split1ResourceGroup@(appgrpstream, otherresourcegroup)",
						"split1ResourceGroup@appgrpstream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> datalog"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MFDimPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFDIM",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DtFlowDimcustomer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerStream": {},
									"ProductStream": {},
									"ProductModel": {},
									"ProductCategoryStream": {},
									"GETMAXCUSTOMERSKVALUE": {},
									"DimProdLatest": {},
									"DoesCustomerExist": {},
									"CustomerTable": {},
									"DimProductTable": {},
									"CustomerSKMAX": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalakegen2jfk_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"sourceStagingConcurrency": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T11:31:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DtFlowDimcustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MappingDataFolowPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DfSalesFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "01labdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"jfkSalesOrderDetail": {},
									"SalesOrderHeaderstream": {},
									"FactSalesStream": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalakegen2jfk_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T10:29:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/01labdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NNpipelineLogdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_logdatainfo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataparquet": {},
									"logdataparquetnotnull": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copydatatosqlpoolfromjson",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"writeBehavior": "Insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Correlationid']"
										},
										"sink": {
											"name": "Correlationid",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Operationname']"
										},
										"sink": {
											"name": "Operationname",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Status']"
										},
										"sink": {
											"name": "Status",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventcategory']"
										},
										"sink": {
											"name": "Eventcategory",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Level']"
										},
										"sink": {
											"name": "Level",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Time']"
										},
										"sink": {
											"name": "Time",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"path": "$['Subscription']"
										},
										"sink": {
											"name": "Subscription",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Eventinitiatedby']"
										},
										"sink": {
											"name": "Eventinitiatedby",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcetype']"
										},
										"sink": {
											"name": "Resourcetype",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resourcegroup']"
										},
										"sink": {
											"name": "Resourcegroup",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Resource']"
										},
										"sink": {
											"name": "Resource",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "Jsonlogdata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pool_log_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T08:23:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_logdatainfo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipeCustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customerdf",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFCustomerJsonArray",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomerjsonArraysource": {},
									"Customerpooldb": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalakegen2jfk_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T08:50:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFCustomerJsonArray')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_logdatainfo",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataparquet": {},
									"logdataparquetnotnull": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-29T19:00:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_logdatainfo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipesplitlogdata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfsplitlogdata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfSplitlogdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"logdataparquet": {},
									"datalog": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalakegen2jfk_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T11:06:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfSplitlogdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppngnixappvm')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyNgnixdata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Filebynary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ngnixbinary",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T10:43:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Filebynary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transferttodb')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "converlogtodb",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_ngnix",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ngnixlogfromdsstream": {},
									"ServerLogsStream": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "datalakegen2jfk_service",
									"type": "LinkedServiceReference"
								},
								"folderPath": "staging"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-01T10:43:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_ngnix')]"
			]
		}
	]
}